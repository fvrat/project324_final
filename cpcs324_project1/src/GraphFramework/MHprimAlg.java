package GraphFramework;

import java.util.ArrayList;
import java.util.LinkedList;

/**
 *
 * @author cvs
 */
public class MHprimAlg extends MSTAlgorithm{

    public MHprimAlg(Graph graph) {
        this.graph = graph ;
    }

    
     public void displayResultingMST( ArrayList<Edge> MSTResultList ) {
        
        // variable to store the cost of MSTResultList
        int totalCost = 0 ;
        
        System.out.println("The phone network (minimum spanning tree) generated by min-heap based Prim algorithm"
                + "is as follows:\n");
        
        // loop to go throuh the list that save the resulting edges 
        for (int i = 0; i < MSTResultList.size(); i++) {
            
            System.out.println("Office No." + MSTResultList.get(i).source.displayInfo() + " - Office No." + MSTResultList.get(i).target.displayInfo()
                    + " : line length: " + MSTResultList.get(i).displayInfo());
            totalCost+=MSTResultList.get(i).displayInfo();
        }
        
        System.out.println("Total cost: " + totalCost + "\n");

    }
      class HeapNode {
        Vertex vertex;
        int key;
    }


  

     class ResultSet {
        Vertex parent;
        int weight;
        Edge edge ;
    }

  

 

        public void primMST(  ) {
            
             MSTResultList = new ArrayList<GraphFramework.Edge>();
            boolean[] inHeap = new boolean[graph.vertices.size()];
            ResultSet[] resultSet = new ResultSet[graph.vertices.size()];
            //keys[] used to store the key to know whether min hea update is required
            int[] key = new int[graph.vertices.size()];
            //create heapNode for all the vertices
            HeapNode[] heapNodes = new HeapNode[graph.vertices.size()];
            for (int i = 0; i < graph.vertices.size(); i++) {
                heapNodes[i] = new HeapNode();
                heapNodes[i].vertex = new Vertex(i);
                heapNodes[i].key = Integer.MAX_VALUE;
                resultSet[i] = new ResultSet();
                resultSet[i].parent = null;
                inHeap[i] = true;
                key[i] = Integer.MAX_VALUE;
            }

            //decrease the key for the first index
            heapNodes[0].key = 0;

            //add all the vertices to the MinHeap
            MinHeap minHeap = new MinHeap(graph.vertices.size());
            //add all the vertices to priority queue
            for (int i = 0; i < graph.vertices.size(); i++) {
                minHeap.insert(heapNodes[i]);
            }

            //while minHeap is not empty
            while (!minHeap.isEmpty()) {
                //extract the min
                HeapNode extractedNode = minHeap.extractMin();

                //extracted vertex
                Vertex extractedVertex = extractedNode.vertex;
                inHeap[extractedVertex.label] = false;

                //iterate through all the adjacent vertices
                LinkedList<Edge> list = graph.adjacencylist[extractedVertex.label];
                for (int i = 0; i < list.size(); i++) {
                    Edge edge = list.get(i);
                    //only if edge destination is present in heap
                    if (inHeap[edge.target.label]) {
                        Vertex destination = edge.target;
                        int newKey = edge.weight;
                        //check if updated key < existing key, if yes, update if
                        if (key[destination.label] > newKey) {
                            decreaseKey(minHeap, newKey, destination);
                            //update the parent node for destination
                            resultSet[destination.label].parent = extractedVertex;
                            resultSet[destination.label].weight = newKey;
                            resultSet[destination.label].edge = edge ;
                            key[destination.label] = newKey;
                        }
                    }
                }
            }
            
           
            //print mst
            printMST(resultSet);
        }

        public void decreaseKey(MinHeap minHeap, int newKey, Vertex vertex) {

            //get the index which key's needs a decrease;
            int index = minHeap.indexes[vertex.label];

            //get the node and update its value
            HeapNode node = minHeap.mH[index];
            node.key = newKey;
            minHeap.bubbleUp(index);
        }

        public void printMST(ResultSet[] resultSet ) {
            int total_min_weight = 0;
            System.out.println("Minimum Spanning Tree: ");
            for (int i = 1; i < graph.vertices.size(); i++) {
                System.out.println("Edge: " + resultSet[i].parent.label + " - " + i +
                        " weight: " + resultSet[i].weight);
                total_min_weight += resultSet[i].weight;
            }
            System.out.println("Total minimum weight: " + total_min_weight);
        }
    

     class MinHeap {
        int capacity;
        int currentSize;
        HeapNode[] mH;
        int[] indexes; //will be used to decrease the key


        public MinHeap(int capacity) {
            this.capacity = capacity;
            mH = new HeapNode[capacity + 1];
            indexes = new int[capacity];
            mH[0] = new HeapNode();
            mH[0].key = Integer.MIN_VALUE;
            mH[0].vertex = null;
            currentSize = 0;
        }

        public void display() {
            for (int i = 0; i <= currentSize; i++) {
                System.out.println(" " + mH[i].vertex.label + "   key   " + mH[i].key);
            }
            System.out.println("________");
        }

        public void insert(HeapNode x) {
            currentSize++;
            int idx = currentSize;
            mH[idx] = x;
            indexes[x.vertex.label] = idx;
            bubbleUp(idx);
        }

        public void bubbleUp(int pos) {
            int parentIdx = pos / 2;
            int currentIdx = pos;
            while (currentIdx > 0 && mH[parentIdx].key > mH[currentIdx].key) {
                HeapNode currentNode = mH[currentIdx];
                HeapNode parentNode = mH[parentIdx];

                //swap the positions
                indexes[currentNode.vertex.label] = parentIdx;
                indexes[parentNode.vertex.label] = currentIdx;
                swap(currentIdx, parentIdx);
                currentIdx = parentIdx;
                parentIdx = parentIdx / 2;
            }
        }


public HeapNode extractMin() {
    HeapNode min = mH[1];
    HeapNode lastNode = mH[currentSize];
    indexes[lastNode.vertex.label] = 1;
    mH[1] = lastNode;
    mH[currentSize] = null;
    sinkDown(1);
    currentSize--;
    return min;
}

public void sinkDown(int k) {
    int smallest = k;
    int leftChildIdx = 2 * k;
    int rightChildIdx = 2 * k+1;
    if (leftChildIdx < heapSize() && mH[smallest].key > mH[leftChildIdx].key) {
        smallest = leftChildIdx;
    }
    if (rightChildIdx < heapSize() && mH[smallest].key > mH[rightChildIdx].key) {
        smallest = rightChildIdx;
    }
    if (smallest != k) {
        Edge smallestEdge = mH[smallest].vertex.getMinEdge();
        Edge kEdge = mH[k].vertex.getMinEdge();
        
        Vertex smallestVertex =  mH[smallest].vertex;
        Vertex kVertex =mH[k].vertex;

        indexes[smallestVertex.label] = k;
        indexes[kVertex.label] = smallest;
        swap(k, smallest);
        sinkDown(smallest);
    }
}


        public void swap(int a, int b) {
            HeapNode temp = mH[a];
            mH[a] = mH[b];
            mH[b] = temp;
        }

        public boolean isEmpty() {
            return currentSize == 0;
        }

        public int heapSize(){
            return currentSize;
        }
    
     
     }
}

