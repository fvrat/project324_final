package PhoneNetworkApp;

import GraphFramework.KruskalAlg;
import GraphFramework.MHprimAlg;
import GraphFramework.MSTAlgorithm;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class PhoneNWDesignApp {

    static BluePrintsGraph PhLNetwork;

    public static void main(String[] args) throws FileNotFoundException {

        Scanner input = new Scanner(System.in);

        PhLNetwork = new BluePrintsGraph();
        boolean printTime = true , isReq1 = false  ;
        // long variables to store the strating time and ending time 
        //of processing Kruskal and Prim algorithms
        long startTime, endTime;

        // double variable to store differenece of time 
        //in nanoseconed between startTime and endTime variables
        double result;
        System.out.println("\t -------Test and compare Different Minimum Spanning Tree Algorithms-------\n");
        System.out.println("\t1- Kruskal's Algorithm& Prim's Algorithm (based on Priority Queue)\n"
                + "\t2- Prim's Algorithm (based on Min Heap)& Prim's Algorithm(based on Priority Queue)");
       
        System.out.print(">> Enter your choice (1 or 2): ");
        int choice = input.nextInt();
        if (choice == 1) {
            PhLNetwork.readGraphFromFile("input.txt");printTime = false ;
            isReq1 = true ;
        } else {
            System.out.print("Enter the number of Vertices : ");
            int vertexNO = input.nextInt();
            System.out.print("Enter the number of Edges : ");
            int edgeNO = input.nextInt();
            System.out.print("Enter 0 if the graph is undirected or 1 if directed : ");
            int isdiagraph = input.nextInt();
            PhLNetwork.makeGraph(vertexNO, edgeNO, isdiagraph);
            
        }

        MHprimAlg prim = new MHprimAlg(PhLNetwork);
        KruskalAlg kruskal = new KruskalAlg(PhLNetwork);
        startTime = System.currentTimeMillis();
        System.out.println("The phone network (minimum spanning tree) generated by min-heap based Prim algorithm"
                + "is as follows:\n");
        int cost = prim.primMST(isReq1);
        System.out.println("Total cost: " + cost + "\n");
        endTime = System.currentTimeMillis();
        result = (double) (endTime - startTime);
        if(printTime)
        System.out.println("It took me " + result + " ms\n");

        startTime = System.currentTimeMillis();
        System.out.println("The phone network (minimum spanning tree) generated by Kruskal algorithm is as follows:\n");
        cost = kruskal.kruskal(isReq1);
        System.out.println("Total cost: " + cost + "\n");
        endTime = System.currentTimeMillis();
        result = (double) (endTime - startTime);
        if(printTime)
        System.out.println("It took me " + result + " ms\n");

    }

}
